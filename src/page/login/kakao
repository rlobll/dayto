import React, { useEffect, useState } from "react";
import styled from "styled-components";

const KakaoLogin = () => {
  const [user, setUser] = useState(null);
  const [isLogin, setIsLogin] = useState(false);
  // const Rest_api_key = "e5c7de101f957099b70572a525bfd5f4"; //REST API KEY
  // const redirect_uri = "https://localhost:3000"; //Redirect URI
  // oauth 요청 URL

  // const restApiKey = process.env.REACT_APP_REST_API_KEY;
  // const redirectUri = "http://localhost:3000/auth/kakao";
  // const kakaoURL = `https://kauth.kakao.com/oauth/authorize?client_id=${restApiKey}&redirect_uri=${redirectUri}&response_type=code`;

  const Kakao = window.Kakao;

  // const kakaoClick = () => {
  //   // window.open(kakaoURL, "naverPopup", "width=600,height=400"); // 팝업창으로 나타나게 하는 거
  //   window.location.href = kakaoURL;
  // };

  const initKakao = async () => {
    // 등록된 앱의 JavaScript key
    const jsKey = "bfe1cd9bbf9531087f5f3f9a577db9a3";
    // SDK는 한 번만 초기화해야 한다.
    // 중복되는 초기화를 막기 위해 isInitialized()로 SDK 초기화 여부를 판단한다.
    if (Kakao && !Kakao.isInitialized()) {
      // JavaScript key를 인자로 주고 SDK 초기화
      await Kakao.init(jsKey);
      // SDK 초기화 여부를 확인하자.
      console.log(`kakao 초기화 ${Kakao.isInitialized()}`);
      // console.log("kakao sdk 초기화", Kakao.isInitialized()); 위와 똑같은 거
    }
  };

  const kakaoLogin = async () => {
    await Kakao.Auth.login({
      success(res) {
        console.log(res);
        Kakao.Auth.setAccessToken(res.access_token);
        console.log("카카오 로그인 성공");

        Kakao.API.request({
          url: "/v2/user/me",
          success(res) {
            console.log("카카오 인가 요청 성공");
            setIsLogin(true);
            // const kakaoAccount = res.kakao_account;
            // localStorage.setItem("email", kakaoAccount.email);
            // localStorage.setItem(
            //   "profileImg",
            //   kakaoAccount.profile.profile_image_url
            // );
            // localStorage.setItem("nickname", kakaoAccount.profile.name);
            localStorage.setItem("nickname", "은비");
            setUser({
              // email: kakaoAccount.email,
              // profileImg: kakaoAccount.profile.profile_image_url,
              // nickname: kakaoAccount.profile.nickname,
              nickname: localStorage.getItem("nickname"),
              // email: kakaoAccount.profile.email,
            });
          },
          fail(error) {
            console.log(error);
          },
        });
      },
      fail(error) {
        console.log(error);
      },
    });
  };

  const kakaoLogout = () => {
    Kakao.Auth.logout((res) => {
      console.log(
        "얘는 로그아웃 누르면 삭제되어서 null이 나온다",
        Kakao.Auth.getAccessToken()
      );
      console.log("이게 뭔데 true가 뜨는거지?삭제 성공했다는건가?", res);
      localStorage.removeItem("nickname");
      setUser(null);
    });
  };

  useEffect(() => {
    initKakao();
    Kakao.Auth.getAccessToken() ? setIsLogin(true) : setIsLogin(false);
  }, []);

  useEffect(() => {
    console.log("로그인해서 나타나는거", isLogin);
    if (isLogin) {
      setUser({
        nickname: localStorage.getItem("nickname"),
      });
    }
  }, [isLogin]);

  return (
    <>
      <div>
        {/* <KakaoLoginBtn
          // onClick={kakaoClick}
          onClick={kakaoLogin}
        >
          카카오 로그인
        </KakaoLoginBtn> */}

        {user ? (
          <div>
            <button onClick={kakaoLogout}>로그아웃</button>
            <p>{user.nickname}</p>
          </div>
        ) : (
          <KakaoLoginBtn
            // onClick={kakaoClick}
            onClick={kakaoLogin}
          >
            카카오 로그인
          </KakaoLoginBtn>
        )}
      </div>
    </>
  );
};

export default KakaoLogin;

const KakaoLoginBtn = styled.button`
  border: none;
  background: #fee500;
  color: black;
  font-size: 15px;
  font-weight: bold;
  cursor: pointer;
`;
